---
# List User Accounts Playbook for Ansible Tower/AWX
# This playbook queries user accounts from Active Directory or LDAP systems
# Compatible with both Windows Domain Controllers and Linux LDAP servers
#
# REQUIRED VARIABLES (must be passed via extra_vars or Tower job template):
# - action: Operation to perform (default: 'list_accounts')
# - search_filter: Username search pattern (default: '*')
# - account_status_filter: Filter by account status: all, enabled, disabled, locked
# - organizational_unit: Specific OU to search within (optional)
# - operation_timestamp: Timestamp for this operation
# - requested_by: Who/what initiated this request
#
# OPTIONAL VARIABLES:
# - output_format: json or csv (default: json)
# - include_groups: Include group memberships (default: false)
# - max_results: Maximum results to return (default: 1000)

- name: List User Accounts
  hosts: all,!localhost
  gather_facts: true

  tasks:
    - name: Validate required variables
      assert:
        that:
          - action is defined
          - search_filter is defined
          - account_status_filter is defined
          - operation_timestamp is defined
          - requested_by is defined
        fail_msg: "Required variables are missing. Please check the README for required variables."

    - name: Set derived variables
      set_fact:
        use_filter: "{{ search_filter != '*' }}"
        limit_to_ou: "{{ organizational_unit is defined and organizational_unit != '' }}"
        include_attributes: "{{ include_attributes | default(['samAccountName', 'displayName', 'mail', 'enabled', 'lastLogonDate']) }}"
        output_format: "{{ output_format | default('json') }}"
        include_groups: "{{ include_groups | default(false) }}"
        max_results: "{{ max_results | default(1000) }}"

    - name: Display operation information
      debug:
        msg:
          - "=== User Account Listing Operation ==="
          - "Operation: {{ action }}"
          - "Search Filter: {{ search_filter }}"
          - "OU Filter: {{ organizational_unit | default('None') }}"
          - "Status Filter: {{ account_status_filter }}"
          - "Target Hosts: {{ ansible_play_hosts | join(', ') }}"
          - "Timestamp: {{ operation_timestamp }}"
          - "Requested by: {{ requested_by }}"

    # Windows Active Directory Tasks
    - name: Query Active Directory users (Windows)
      block:
        - name: Get AD users with basic filter
          community.windows.win_domain_user:
            name: "{{ search_filter }}"
            state: query
          register: ad_users_basic
          when: 
            - ansible_os_family == "Windows"
            - not limit_to_ou
            - not use_filter or search_filter == "*"

        - name: Get AD users with search filter
          community.windows.win_powershell:
            script: |
              $filter = "{{ search_filter }}"
              $ouFilter = "{{ organizational_unit | default('') }}"
              $statusFilter = "{{ account_status_filter }}"
              
              # Build the search base
              if ($ouFilter) {
                  $searchBase = $ouFilter
              } else {
                  $searchBase = (Get-ADDomain).DistinguishedName
              }
              
              # Build the filter
              $ldapFilter = "(&(objectClass=user)(objectCategory=person)"
              
              if ($filter -ne "*") {
                  if ($filter.Contains("*")) {
                      $ldapFilter += "(samAccountName=$filter)"
                  } else {
                      $ldapFilter += "(samAccountName=*$filter*)"
                  }
              }
              
              # Add status filter
              switch ($statusFilter) {
                  "enabled" { $ldapFilter += "(!(userAccountControl:1.2.840.113556.1.4.803:=2))" }
                  "disabled" { $ldapFilter += "(userAccountControl:1.2.840.113556.1.4.803:=2)" }
                  "locked" { $ldapFilter += "(lockoutTime>=1)" }
                  # "all" - no additional filter
              }
              
              $ldapFilter += ")"
              
              # Get users with specified attributes
              $attributes = @("{{ include_attributes | join('", "') }}")
              
              try {
                  $users = Get-ADUser -LDAPFilter $ldapFilter -SearchBase $searchBase -Properties $attributes | Select-Object -First {{ max_results }}
                  
                  $result = @()
                  foreach ($user in $users) {
                      $userObj = @{
                          samAccountName = $user.SamAccountName
                          distinguishedName = $user.DistinguishedName
                          displayName = $user.DisplayName
                          givenName = $user.GivenName
                          surname = $user.Surname
                          mail = $user.EmailAddress
                          enabled = $user.Enabled
                          lastLogonDate = if ($user.LastLogonDate) { $user.LastLogonDate.ToString('yyyy-MM-ddTHH:mm:ssZ') } else { $null }
                          whenCreated = if ($user.WhenCreated) { $user.WhenCreated.ToString('yyyy-MM-ddTHH:mm:ssZ') } else { $null }
                          accountExpirationDate = if ($user.AccountExpirationDate) { $user.AccountExpirationDate.ToString('yyyy-MM-ddTHH:mm:ssZ') } else { $null }
                      }
                      
                      if (${{ include_groups }}) {
                          $userObj.memberOf = (Get-ADUser $user.SamAccountName -Properties MemberOf).MemberOf
                      }
                      
                      $result += $userObj
                  }
                  
                  Write-Output (@{
                      success = $true
                      users = $result
                      total_count = $result.Count
                      search_filter = $filter
                      organizational_unit = $ouFilter
                      status_filter = $statusFilter
                  } | ConvertTo-Json -Depth 5)
                  
              } catch {
                  Write-Output (@{
                      success = $false
                      error = $_.Exception.Message
                      search_filter = $filter
                      organizational_unit = $ouFilter
                  } | ConvertTo-Json)
              }
          register: ad_users_filtered
          when: 
            - ansible_os_family == "Windows"
            - use_filter or limit_to_ou or account_status_filter != "all"

        - name: Parse PowerShell result
          set_fact:
            ad_query_result: "{{ ad_users_filtered.output[0] | from_json }}"
          when: ad_users_filtered is defined and ad_users_filtered.output is defined

      when: ansible_os_family == "Windows"

    # Linux LDAP Tasks
    - name: Query LDAP users (Linux)
      block:
        - name: Install required Python packages
          pip:
            name: 
              - python-ldap
            state: present
          become: true
          when: ansible_python_interpreter is defined

        - name: Query LDAP directory for users
          community.general.ldap_search:
            dn: "{{ organizational_unit | default('ou=people,dc=example,dc=com') }}"
            scope: "subtree"
            filter: |
              {% if use_filter and search_filter != "*" %}
              (&(objectClass=inetOrgPerson)(uid={{ search_filter }}))
              {% else %}
              (objectClass=inetOrgPerson)
              {% endif %}
            attrs:
              - uid
              - cn
              - displayName
              - mail
              - givenName
              - sn
              - createTimestamp
              - modifyTimestamp
              - accountStatus
          register: ldap_users
          when: ansible_os_family != "Windows"

        - name: Format LDAP results
          set_fact:
            ldap_query_result:
              success: true
              users: |
                {% set users = [] %}
                {% for entry in ldap_users.results %}
                  {% set user = {
                    'uid': entry.uid[0] if entry.uid is defined else '',
                    'cn': entry.cn[0] if entry.cn is defined else '',
                    'displayName': entry.displayName[0] if entry.displayName is defined else '',
                    'mail': entry.mail[0] if entry.mail is defined else '',
                    'givenName': entry.givenName[0] if entry.givenName is defined else '',
                    'surname': entry.sn[0] if entry.sn is defined else '',
                    'createTimestamp': entry.createTimestamp[0] if entry.createTimestamp is defined else '',
                    'modifyTimestamp': entry.modifyTimestamp[0] if entry.modifyTimestamp is defined else '',
                    'distinguishedName': entry.dn
                  } %}
                  {{ users.append(user) }}
                {% endfor %}
                {{ users }}
              total_count: "{{ ldap_users.results | length }}"
              search_filter: "{{ search_filter }}"
              organizational_unit: "{{ organizational_unit | default('') }}"
          when: ldap_users is defined and ldap_users.results is defined

      when: ansible_os_family != "Windows"

    # Result consolidation and output
    - name: Consolidate results
      set_fact:
        final_result: |
          {% if ansible_os_family == "Windows" and ad_query_result is defined %}
            {{ ad_query_result }}
          {% elif ansible_os_family != "Windows" and ldap_query_result is defined %}
            {{ ldap_query_result }}
          {% else %}
            {
              "success": false,
              "error": "No results available or unsupported system type",
              "system_type": "{{ ansible_os_family }}"
            }
          {% endif %}

    - name: Display query summary
      debug:
        msg:
          - "=== Query Results Summary ==="
          - "Success: {{ final_result.success | default(false) }}"
          - "Total accounts found: {{ final_result.total_count | default(0) }}"
          - "Search filter used: {{ final_result.search_filter | default('none') }}"
          - "Organizational unit: {{ final_result.organizational_unit | default('all') }}"
          - "Status filter: {{ account_status_filter }}"

    - name: Display detailed results (when verbose)
      debug:
        var: final_result
      when: 
        - ansible_verbosity >= 2
        - final_result.success | default(false)

    - name: Save results to file (JSON format)
      copy:
        content: "{{ final_result | to_nice_json }}"
        dest: "/tmp/user_accounts_{{ operation_timestamp | regex_replace(':', '-') }}.json"
        mode: '0644'
      when: 
        - final_result.success | default(false)
        - output_format == "json"
      delegate_to: localhost

    - name: Save results to file (CSV format)
      template:
        src: user_accounts.csv.j2
        dest: "/tmp/user_accounts_{{ operation_timestamp | regex_replace(':', '-') }}.csv"
        mode: '0644'
      when: 
        - final_result.success | default(false)
        - output_format == "csv"
      delegate_to: localhost

    # Error handling
    - name: Handle query failures
      debug:
        msg:
          - "=== Query Failed ==="
          - "Error: {{ final_result.error | default('Unknown error occurred') }}"
          - "Please check:"
          - "  - Network connectivity to domain controllers/LDAP servers"
          - "  - Authentication credentials"
          - "  - Search filters and organizational unit paths"
          - "  - Required PowerShell modules (ActiveDirectory) for Windows"
          - "  - Required Python packages (python-ldap) for Linux"
      when: not (final_result.success | default(false))

    - name: Fail playbook if query unsuccessful
      fail:
        msg: "User account query failed: {{ final_result.error | default('Unknown error') }}"
      when: 
        - not (final_result.success | default(false))
        - final_result.error is defined

  post_tasks:
    - name: Operation completion summary
      debug:
        msg:
          - "=== Operation Complete ==="
          - "Action: {{ action }}"
          - "Status: {{ 'SUCCESS' if final_result.success | default(false) else 'FAILED' }}"
          - "Accounts processed: {{ final_result.total_count | default(0) }}"
          - "Execution time: {{ ansible_date_time.iso8601 }}"
          - "Results saved to: /tmp/user_accounts_{{ operation_timestamp | regex_replace(':', '-') }}.{{ output_format }}"
      when: final_result.success | default(false)
